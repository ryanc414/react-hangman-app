{"version":3,"sources":["hangman00.svg","hangman01.svg","hangman02.svg","hangman03.svg","hangman04.svg","hangman05.svg","hangman06.svg","hangman07.svg","hangman08.svg","hangman09.svg","hangman10.svg","hangman11.svg","hangman12.svg","hangman13.svg","index.tsx"],"names":["module","exports","__webpack_require__","p","HangmanImages","hangman00","hangman01","hangman02","hangman03","hangman04","hangman05","hangman06","hangman07","hangman08","hangman09","hangman10","hangman11","hangman12","hangman13","MetaGame","props","_this","Object","_root_react_hangman_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_root_react_hangman_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_root_react_hangman_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","wordLength","NaN","playGame","bind","_root_react_hangman_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","handleRetry","setState","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","Game","placeHolder","maxMisses","StartSelector","React","Component","_this2","value","handleChange","handleSubmit","e","preventDefault","target","parseInt","className","onSubmit","onChange","type","_this3","initialState","handleLetter","onKeyUp","gamediv","current","focus","guessedLetters","Map","aCode","charCodeAt","i","letter","String","fromCharCode","set","misses","discoveredLetterCount","revealedWord","Array","fill","words","wordsOfLength","finishMessage","createRef","n","allWords","filter","word","length","map","toUpperCase","_this4","Error","get","splitWords","splitWordsByLetter","patternWords","mostFrequentPattern","wordsWithLetter","wordsWithoutLetter","mostFrequentMatchingWords","console","log","reveal","size","randomWord","join","forEach","indexOf","push","shift","undefined","pattern","LetterPattern","matchingWords","matches","pop","Math","floor","random","key","upperKey","tabIndex","ref","Hangman","StatusColumn","onRetry","Keyboard","img_src","src","alt","finishInfo","Fragment","onClick","revealedSoFar","newRevealed","KeyboardRow","letters","_this5","renderLetter","_this6","Key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.665b4548.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hangman00.5ce7117f.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman01.352e15ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman02.794f5d62.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman03.d66ac1a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman04.d5c2f7ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman05.fa3a1b0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman06.f8db9435.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman07.a4dde311.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman08.a011147c.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman09.0610cd3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman10.48e16e87.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman11.1c0e7018.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman12.cc091c38.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman13.06d9fddc.svg\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport hangman00 from \"./hangman00.svg\"\nimport hangman01 from \"./hangman01.svg\"\nimport hangman02 from \"./hangman02.svg\"\nimport hangman03 from \"./hangman03.svg\"\nimport hangman04 from \"./hangman04.svg\"\nimport hangman05 from \"./hangman05.svg\"\nimport hangman06 from \"./hangman06.svg\"\nimport hangman07 from \"./hangman07.svg\"\nimport hangman08 from \"./hangman08.svg\"\nimport hangman09 from \"./hangman09.svg\"\nimport hangman10 from \"./hangman10.svg\"\nimport hangman11 from \"./hangman11.svg\"\nimport hangman12 from \"./hangman12.svg\"\nimport hangman13 from \"./hangman13.svg\"\n\nimport allWords from \"./dictionary.json\";\n\nconst HangmanImages = [\n  hangman00,\n  hangman01,\n  hangman02,\n  hangman03,\n  hangman04,\n  hangman05,\n  hangman06,\n  hangman07,\n  hangman08,\n  hangman09,\n  hangman10,\n  hangman11,\n  hangman12,\n  hangman13,\n]\n\n// Top-level component. Renders either the pre-game setup menu or the main\n// game selectively.\nclass MetaGame extends React.Component<{}, {wordLength: number}> {\n  constructor(props: object) {\n    super(props);\n    this.state = {wordLength: NaN};\n    this.playGame = this.playGame.bind(this);\n    this.handleRetry = this.handleRetry.bind(this);\n  }\n\n  playGame(wordLength: number) {\n    this.setState({wordLength: wordLength});\n  }\n\n  handleRetry() {\n    this.setState({wordLength: NaN});\n  }\n\n  render()  {\n    if (!this.state.wordLength) {\n      return <StartSelector playGame={this.playGame} />;\n    } else {\n      return (\n        <Game\n           wordLength={this.state.wordLength}\n           placeHolder=\"_\"\n           maxMisses={13}\n           handleRetry={this.handleRetry}\n        />\n      );\n    }\n  }\n}\n\ninterface StartSelectorProps {playGame: (wordLength: number) => void};\n\n// Simple form to select the word length to play with.\nclass StartSelector extends React.Component<\n    StartSelectorProps, {value: string}\n  > {\n  constructor(props: StartSelectorProps) {\n    super(props);\n    this.state = {value: \"8\"};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    e.preventDefault();\n    this.setState({value: e.target.value});\n  }\n\n  handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    this.props.playGame(parseInt(this.state.value));\n  }\n\n  render() {\n    return (\n      <div className=\"start-selector\">\n        <h1>Fiendish Hangman</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Select a word length:\n            <select value={this.state.value} onChange={this.handleChange}>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value=\"6\">6</option>\n              <option value=\"7\">7</option>\n              <option value=\"8\">8</option>\n              <option value=\"9\">9</option>\n              <option value=\"10\">10</option>\n              <option value=\"11\">11</option>\n              <option value=\"12\">12</option>\n            </select>\n          </label>\n          <input type=\"submit\" value=\"Play\" />\n        </form>\n      </div>\n    );\n  }\n}\n\ninterface GameProps {\n  wordLength: number,\n  placeHolder: string,\n  maxMisses: number,\n  handleRetry: () => void,\n};\n\ninterface GameState {\n  misses: number,\n  discoveredLetterCount: number,\n  guessedLetters: Map<string, boolean>,\n  revealedWord: Array<string>,\n  words: Array<string>,\n  finishMessage: string | null,\n  gamediv: React.RefObject<HTMLDivElement>,\n};\n\n// Main Hangman game component.\nclass Game extends React.Component<GameProps, GameState>  {\n  constructor(props: GameProps) {\n    super(props)\n    this.state = this.initialState();\n    this.handleLetter = this.handleLetter.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.handleRetry = this.handleRetry.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.gamediv.current) {\n      this.state.gamediv.current.focus();\n    }\n  }\n\n  // Construct initial state, also used for reset.\n  initialState(): GameState {\n    let guessedLetters = new Map();\n    const aCode = \"A\".charCodeAt(0);\n\n    for (let i = 0; i < 26; i++) {\n      const letter = String.fromCharCode(aCode + i);\n      guessedLetters.set(letter, false);\n    }\n\n    const revealedWord = Array(this.props.wordLength).fill(\n      this.props.placeHolder);\n\n    const words = this.wordsOfLength(this.props.wordLength);\n\n    return {\n      misses: 0,\n      discoveredLetterCount: 0,\n      guessedLetters: guessedLetters,\n      revealedWord: revealedWord,\n      words: words,\n      finishMessage: null,\n      gamediv: React.createRef(),\n    };\n  }\n\n  // Filter words by length.\n  wordsOfLength(n: number): Array<string> {\n    return (allWords\n\t\t\t.filter((word) => word.length === n)\n\t\t\t.map((word) => word.toUpperCase())\n\t\t);\n  }\n\n  // Handle a guessed letter.\n  handleLetter(letter: string) {\n    if ((letter.length !== 1) || (letter < 'A') || (letter > 'Z')) {\n      throw new Error(\"Not a letter: \" + letter);\n\t\t}\n\n    this.setState((state: GameState, props: GameProps): GameState => {\n      if (state.guessedLetters.get(letter)) {\n        throw new Error(\"Already guessed letter: \" + letter);\n      }\n\n      if (state.finishMessage) {\n        return state;\n      }\n\n      let guessedLetters = new Map(state.guessedLetters);\n      guessedLetters.set(letter, true);\n\n      const splitWords = this.splitWordsByLetter(letter);\n      const patternWords = this.mostFrequentPattern(\n        splitWords.wordsWithLetter, letter);\n\n      let revealedWord: Array<string>;\n      let misses: number;\n      let discoveredLetterCount: number;\n      let words: Array<string>;\n\n      if (splitWords.wordsWithoutLetter.length >=\n          patternWords.mostFrequentMatchingWords.length) {\n        console.log(\"Bad guess\");\n        revealedWord = state.revealedWord;\n        misses = state.misses + 1;\n        discoveredLetterCount = state.discoveredLetterCount;\n        words = splitWords.wordsWithoutLetter;\n      } else {\n        console.log(\"Good guess!\");\n        if (patternWords.mostFrequentPattern === null) {\n          throw new Error(\"No pattern was found\");\n        }\n\n        revealedWord = patternWords.mostFrequentPattern.reveal(\n          state.revealedWord);\n        misses = state.misses;\n        discoveredLetterCount = (\n          state.discoveredLetterCount\n          + patternWords.mostFrequentPattern.size\n        );\n        words = patternWords.mostFrequentMatchingWords;\n      }\n\n      let finishMessage = null;\n      if (misses === props.maxMisses) {\n        finishMessage = (\n          \"Too many misses. I was thinking of: \" + this.randomWord(words));\n      } else if (discoveredLetterCount === props.wordLength) {\n        finishMessage = \"You won! I was thinking of: \" + revealedWord.join(\"\");\n      }\n\n      return {\n        misses: misses,\n        discoveredLetterCount: discoveredLetterCount,\n        guessedLetters: guessedLetters,\n        revealedWord: revealedWord,\n        words: words,\n        finishMessage: finishMessage,\n        gamediv: state.gamediv,\n      };\n    });\n  }\n\n  // Split our current words list into two, one with and one without a certain\n  // letter.\n  splitWordsByLetter(letter: string): {\n      wordsWithoutLetter: Array<string>, wordsWithLetter: Array<string>} {\n    let wordsWithoutLetter: Array<string> = [];\n    let wordsWithLetter: Array<string> = [];\n\n    this.state.words.forEach((word) => {\n      if (word.indexOf(letter) === -1) {\n        wordsWithoutLetter.push(word);\n      } else {\n        wordsWithLetter.push(word);\n      }\n    });\n\n    return {\n      wordsWithoutLetter: wordsWithoutLetter,\n      wordsWithLetter: wordsWithLetter,\n    }\n  }\n\n  // Find the letter pattern that matches the most words.\n  mostFrequentPattern(wordsWithLetter: Array<string>, letter: string): {\n        mostFrequentPattern: LetterPattern | null,\n        mostFrequentMatchingWords: Array<string>,\n      } {\n    let mostFrequentPattern = null;\n    let mostFrequentMatchingWords: Array<string> = [];\n\n    // Algorithm for finding the most frequent pattern:\n    //\n    // 1. Pop the first word off\n    // 2. Find all other words that match that pattern.\n    // 3. Remove matching words\n    // 4. Update the running count of most frequent pattern.\n    // 5. Repeat until all words are exhausted.\n    for (let word = wordsWithLetter.shift();\n         word !== undefined;\n         word = wordsWithLetter.shift()) {\n      const pattern = new LetterPattern(word, letter);\n      if (pattern.size === 0) {\n        throw new Error(\"Pattern did not match\");\n      }\n\n      let matchingWords = [word];\n\n      for (let i = 0; i < wordsWithLetter.length; ) {\n        if (pattern.matches(wordsWithLetter[i])) {\n          matchingWords.push(wordsWithLetter[i]);\n          wordsWithLetter[i] = wordsWithLetter[wordsWithLetter.length - 1];\n          wordsWithLetter.pop();\n        } else {\n          i++;\n        }\n      }\n\n      if (matchingWords.length > mostFrequentMatchingWords.length) {\n        mostFrequentMatchingWords = matchingWords;\n        mostFrequentPattern = pattern;\n      }\n    }\n\n    return {\n      mostFrequentPattern: mostFrequentPattern,\n      mostFrequentMatchingWords: mostFrequentMatchingWords,\n    };\n  }\n\n  // Select a word at random from our list of possibles.\n  randomWord(words: Array<string>): string {\n    return words[Math.floor(Math.random() * words.length)];\n  }\n\n  // Handle a key press. If any letter key is pressed we take it as the next\n  // input.\n  onKeyUp(e: React.KeyboardEvent<HTMLDivElement>) {\n    console.log('Key pressed: ' + e.key);\n    if (e.key.length !== 1) {\n      return;\n    }\n\n    const upperKey = e.key.toUpperCase();\n    if ((upperKey < 'A') || (upperKey > 'Z')) {\n      return;\n    }\n\n    if (this.state.guessedLetters.get(upperKey)) {\n      return;\n    }\n\n    console.log('Handle key event for letter: ' + upperKey);\n    e.preventDefault();\n    this.handleLetter(upperKey);\n  }\n\n  handleRetry() {\n    this.setState(this.initialState());\n    this.props.handleRetry();\n  }\n\n  // Main render function.\n  render() {\n    return (\n      <div\n        className=\"game\"\n        onKeyUp={this.onKeyUp}\n        tabIndex={0}\n        ref={this.state.gamediv}\n      >\n        <div className=\"game-info\">\n          <Hangman misses={this.state.misses} />\n          <StatusColumn\n            revealedWord={this.state.revealedWord}\n            finishMessage={this.state.finishMessage}\n            onRetry={this.handleRetry}\n          />\n        </div>\n        <Keyboard\n          handleLetter={this.handleLetter}\n          guessedLetters={this.state.guessedLetters}\n        />\n        <p>Click keys or use your keyboard to guess a letter.</p>\n      </div>\n    );\n  }\n}\n\n// Selects and renders a hangman image depending on the number of misses.\nfunction Hangman(props: {misses: number}) {\n  const img_src = HangmanImages[props.misses]\n  return (\n    <img\n      className=\"hangman-img\"\n      src={img_src}\n      alt={\n        \"A poor stick man in stage \"\n        + props.misses\n        + \" of being hanged :(\"\n      }\n    />\n  );\n}\n\ninterface StatusColumnProps {\n  revealedWord: Array<string>,\n  finishMessage: string | null,\n  onRetry: () => void,\n}\n\n// Display the revealed word and any extra status information.\nfunction StatusColumn(props: StatusColumnProps) {\n  const revealedWord = props.revealedWord.join(\" \");\n\n  let finishInfo = null;\n  if (props.finishMessage !== null) {\n    finishInfo = (\n      <>\n        <p>{props.finishMessage}</p>\n        <button className=\"retry-button\" onClick={props.onRetry}>\n          Retry?\n        </button>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"status-col\">\n      <p>Word:</p>\n      <p>{revealedWord}</p>\n      {finishInfo}\n    </div>\n  );\n}\n\n// Represents a pattern of a letter matching a word.\nclass LetterPattern  {\n\n  public size: number;\n  private letter: string;\n  private pattern: Array<boolean>;\n\n  // Construct a pattern for a particular letter in a word.\n  constructor(word: string, letter: string) {\n    this.letter = letter;\n    let size = 0;\n    let pattern = Array(word.length);\n\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] === letter) {\n        pattern[i] = true;\n        size++\n      } else {\n        pattern[i] = false;\n      }\n    }\n\n    this.size = size;\n    this.pattern = pattern;\n  }\n\n  // Check if a word matches this pattern.\n  matches(word: string): boolean {\n    if (word.length !== this.pattern.length) {\n      throw new Error(\"Word length does not match pattern\");\n    }\n\n    for (let i = 0; i < word.length; i++) {\n      if (this.pattern[i] && (word[i] !== this.letter)) {\n        return false;\n      } else if (!this.pattern[i] && (word[i] === this.letter)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Reveals letters in this pattern in the word.\n  reveal(revealedSoFar: Array<string>) {\n    if (revealedSoFar.length !== this.pattern.length) {\n      throw new Error(\"Word length does not match pattern\");\n    }\n\n    let newRevealed = Array(revealedSoFar.length);\n\n    for (let i = 0; i < revealedSoFar.length; i++) {\n      if (this.pattern[i]) {\n        newRevealed[i] = this.letter;\n      } else {\n        newRevealed[i] = revealedSoFar[i];\n      }\n    }\n\n    return newRevealed;\n  }\n}\n\ninterface KeyboardProps {\n  handleLetter: (letter: string) => void,\n  guessedLetters: Map<string, boolean>,\n};\n\n\nfunction Keyboard(props: KeyboardProps) {\n  return (\n    <div className=\"keyboard\">\n      <KeyboardRow\n         letters={[\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"]}\n         handleLetter={props.handleLetter}\n         guessedLetters={props.guessedLetters}\n      />\n      <KeyboardRow\n        letters={[\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"]}\n        handleLetter={props.handleLetter}\n        guessedLetters={props.guessedLetters}\n      />\n      <KeyboardRow\n        letters={[\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"]}\n        handleLetter={props.handleLetter}\n        guessedLetters={props.guessedLetters}\n      />\n    </div>\n  );\n}\n\ninterface KeyboardRowProps {\n  handleLetter: (letter: string) => void,\n  guessedLetters: Map<string, boolean>,\n  letters: Array<string>,\n};\n\nclass KeyboardRow extends React.Component<KeyboardRowProps, {}> {\n  constructor(props: KeyboardRowProps) {\n    super(props);\n    this.renderLetter = this.renderLetter.bind(this);\n  }\n\n  renderLetter(letter: string) {\n    if (this.props.guessedLetters.get(letter)) {\n      return (\n        <Key\n          key={letter}\n          letter={letter}\n          onClick={() => null}\n          className=\"key-guessed\"\n        />);\n    } else {\n      return (\n        <Key\n          key={letter}\n          letter={letter}\n          onClick={() => this.props.handleLetter(letter)}\n          className=\"key\"\n        />);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"keyboard-row\">\n        {this.props.letters.map(this.renderLetter)}\n      </div>\n    );\n  }\n}\n\ninterface KeyProps {\n  letter: string,\n  className: string,\n  onClick: () => void,\n}\n\nfunction Key(props: KeyProps) {\n  return (\n    <button className={props.className} onClick={props.onClick}>\n      {props.letter}\n    </button>\n  );\n}\n\n// ========================================\n\nReactDOM.render(\n  <MetaGame />,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}